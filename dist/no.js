// Generated by CoffeeScript 1.8.0

/*
	A simplified version of Make.
 */
var cmder, kit, loadNofile, option, task, _, _base;

if (process.env.NODE_ENV == null) {
  process.env.NODE_ENV = 'development';
}

kit = require('./kit');

_ = kit._;

cmder = kit.requireOptional('commander');

loadNofile = function() {
  var err, path, paths, _i, _len;
  try {
    require('coffee-script/register');
  } catch (_error) {}
  paths = kit.genModulePaths('nofile', __dirname, '').slice(1);
  for (_i = 0, _len = paths.length; _i < _len; _i++) {
    path = paths[_i];
    try {
      return require(path);
    } catch (_error) {
      err = _error;
      if (err.code !== 'MODULE_NOT_FOUND') {
        throw err;
      }
    }
  }
};


/**
 * A simplified task wrapper for `kit.task`
 * @param  {String}   name
 * @param  {Array}    deps
 * @param  {String}   description
 * @param  {Boolean}  isSequential
 * @param  {Function} fn
 * @return {Promise}
 */

task = function(name, deps, description, isSequential, fn) {
  var argedFn;
  if (_.isFunction(deps)) {
    fn = deps;
    deps = void 0;
    description = '';
    isSequential = void 0;
  } else if (_.isString(deps) && _.isFunction(description)) {
    fn = description;
    description = deps;
    deps = void 0;
    isSequential = void 0;
  } else if (_.isArray(deps) && _.isFunction(description)) {
    fn = description;
    description = '';
    isSequential = void 0;
  } else if (_.isArray(deps) && _.isString(description) && _.isFunction(isSequential)) {
    fn = isSequential;
    isSequential = void 0;
  }
  argedFn = function() {
    return fn(cmder);
  };
  cmder.command(name).description(description).action(function() {
    return kit.task.run(name, {
      init: cmder
    });
  });
  return kit.task(name, {
    deps: deps,
    description: description,
    isSequential: isSequential
  }, argedFn);
};

option = cmder.option.bind(cmder);

kit._.extend(global, {
  _: _,
  kit: kit,
  task: task,
  option: option,
  cmder: cmder
});

loadNofile();

cmder.parse(process.argv);

if (cmder.args.length === 0) {
  if (typeof (_base = kit.task).run === "function") {
    _base.run(void 0, {
      init: cmder
    });
  }
}
